#1. Visão Geral do Projeto

A Secretaria de Segurança de Gotham City contratou a Wayne Solutions, uma consultoria digital especializada em soluções críticas, para desenvolver o Gotham Alert — um sistema inteligente de monitoramento de riscos e emissão de alertas em tempo real.

O objetivo é permitir que cidadãos, polícia e o próprio Batman sejam notificados sobre eventos de risco como: ações criminosas, zonas de perigo, picos de aglomeração ou atividades de vilões.

------------------------------------------------------------

#2. Requisitos Técnicos

O projeto possui requisitos técnicos definidos em backlog e documentados no Confluence.

Requisitos Funcionais:

RF-01 - O sistema deve permitir registro automático de eventos com geolocalização  
RF-02 - O sistema deve enviar alertas push para dispositivos móveis  
RF-03 - O painel web deve exibir os alertas em tempo real em um mapa interativo  

Requisitos Não Funcionais:

RNF-01 - A latência máxima para disparo de alertas deve ser de 3 segundos  
RNF-02 - O sistema deve suportar até 10.000 usuários simultâneos  
RNF-03 - O tráfego entre microserviços deve ser criptografado (HTTPS + JWT)

------------------------------------------------------------

#3. Arquitetura e Desenvolvimento
A arquitetura segue o padrão de microsserviços e utiliza tecnologias modernas e escaláveis:

| Componente     | Tecnologia                                  | Observações                                |
| -------------- | ------------------------------------------- | ------------------------------------------ |
| Backend API    | Node.js + Express                           | Serviços REST com autenticação JWT         |
| Banco de Dados | MongoDB                                     | Alta performance em leitura e escrita      |
| Frontend Web   | React + Leaflet                             | Visualização georreferenciada de alertas   |
| App Mobile     | React Native                                | Suporte Android/iOS com push notifications |
| DevOps         | Docker + GitHub Actions + Azure App Service | CI/CD automatizado                         |

Todos os repositórios foram versionados com Git, utilizando GitFlow, branches padronizadas e revisão via Pull Request.

------------------------------------------------------------

#4. Estratégia de QA
A Squad aplicou uma estratégia de testes robusta, liderada por Hera Venenosa, a QA Sênior do time. A atuação de QA ocorreu desde a Sprint 0 com a definição de critérios de aceite, criação de plano de testes e testes automatizados.

##Plano de Testes
| Tipo                     | Ferramenta                          | Status      |
| ------------------------ | ----------------------------------- | ----------- |
| Funcional (APIs)         | Postman / Newman                    | Executado   |
| Performance              | JMeter                              | Executado   |
| Segurança                | OWASP ZAP                           | Executado   |
| Exploratório             | Manual                              | Executado   |
| Regressão automatizada   | Newman (CI/CD) | Configurada        | Configurada |

------------------------------------------------------------

#5. Bugs e Incidentes
Durante os testes, foram encontrados problemas reais que simularam desafios de uma consultoria em produção:

|ID               | Tipo        | Descrição                  | Gravidade | Status                                 |
| --------------- | ----------- | -------------------------- | --------- |--------------------------------------- |
| BUG-GA-001      | Segurança   |JWT exposto em logs         | Alta      | Resolvido                              |
| BUG-GA-002      | Performance | Delay de 7s sob carga      | Crítica   | Corrigido com cache Redis              |
|INCIDENTE-GA-003 | Processo    | Push direto na main sem PR | Média     | Processo ajustado com branch protection|

------------------------------------------------------------

#6. Organização do Repositório
O projeto foi versionado no GitHub com uma estrutura padrão de consultoria:
pgsql

CopyEdit

Documentos/ 
├── Planejamento_Testes/ 
│   └── Plano_Sprint1.md 
├── Collections_Postman/ 
│   └── GothamAlert.postman_collection.json
├── Evidencias/ 
│   └── Teste_Carga_JMeter.csv 
├── Mapas_Mentais/ 
│   └── Gotham_QA_Fluxo.mm
    └── historia.txt 

##Gitflow Aplicado
| Branch                | Uso                       |
| --------------------- | --------------------------|
| main                  | Versão aprovada e testada |
| develop               | Integração da sprint      |
| feature/nomedousuario | Implementação individual  |
| hotfix/               | Correções emergenciais    |

Todos os merges passaram por Pull Request com validação da QA antes do merge na main.

------------------------------------------------------------

#7. Cronograma e Sprints

| Sprint    | Objetivo                   | Entregas                                      |
|-----------|----------------------------|-----------------------------------------------|
| Sprint 1  | MVP do sistema             | Backend + API de alertas + testes funcionais  |
| Sprint 2  | Frontend + Mobile          | Painel web com mapa + app com push            |
| Sprint 3  | Escalabilidade e segurança | Testes de carga, segurança e ajustes          |


------------------------------------------------------------

#8. Conclusão da Sprint

A Squad concluiu com sucesso a Sprint 1, entregando um sistema funcional, testado e versionado corretamente. O uso de Gitflow, boas práticas de QA e documentação permitiu simular com fidelidade o contexto de uma consultoria digital moderna.

Frase da Hera Venenosa, QA Sênior:
 "A única coisa mais perigosa que um bug... é um bug em produção. Mas isso não acontecerá sob minha vigilância."